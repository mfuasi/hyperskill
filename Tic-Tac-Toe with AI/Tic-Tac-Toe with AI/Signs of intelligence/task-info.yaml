type: edu
custom_name: stage4
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from enum import Enum
    from typing import List, Optional
    from copy import deepcopy

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class FieldState(Enum):
        X = 'X'
        O = 'O'
        FREE = ' '


    def get_state(symbol):
        if symbol == 'X':
            return FieldState.X
        elif symbol == 'O':
            return FieldState.O
        elif symbol == ' ' or symbol == '_':
            return FieldState.FREE
        else:
            return None


    class TicTacToeField:

        def __init__(self, *, field: str = '', constructed=None):

            if constructed is not None:
                self.field = deepcopy(constructed)

            else:
                self.field: List[List[Optional[FieldState]]] = [
                    [None for _ in range(3)] for _ in range(3)
                ]

                for row in range(3):
                    for col in range(3):
                        index = (2 - row) * 3 + col
                        self.field[row][col] = get_state(field[index])

        def equal_to(self, other) -> bool:
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        return False
            return True

        def has_next_as(self, other) -> bool:
            improved: bool = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if self.field[i][j] == FieldState.FREE and not improved:
                            improved = True
                        else:
                            return False
            return improved

        def differ_by_one(self, other) -> bool:
            have_single_difference = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if have_single_difference:
                            return False
                        have_single_difference = True
            return have_single_difference

        def is_close_to(self, other) -> bool:
            return (
                self.equal_to(other)
                or self.has_next_as(other)
                or other.has_next_as(self)
            )

        @staticmethod
        def parse(field_str: str):

            lines = field_str.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if
                     i.startswith('|') and i.endswith('|')]

            for line in lines:
                if len(line) != 9:
                    raise WrongAnswerException(
                        f"Line of Tic-Tac-Toe field should be 9 characters long\n"
                        f"found {len(line)} characters in \"{line}\"")
                for c in line:
                    if c not in 'XO|_ ':
                        return None

            field: List[List[Optional[FieldState]]] = [
                [None for _ in range(3)] for _ in range(3)
            ]

            y: int = 2

            for line in lines:
                cols = line[2], line[4], line[6]
                x: int = 0
                for c in cols:
                    state = get_state(c)
                    if state is None:
                        return None
                    field[y][x] = state
                    x += 1
                y -= 1

            return TicTacToeField(constructed=field)

        @staticmethod
        def parse_all(output: str):
            fields = []

            lines = output.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if len(i) > 0]

            candidate_field = ''
            inside_field = False
            for line in lines:
                if '----' in line and not inside_field:
                    inside_field = True
                    candidate_field = ''
                elif '----' in line and inside_field:
                    field = TicTacToeField.parse(candidate_field)
                    if field is not None:
                        fields += [field]
                    inside_field = False

                if inside_field and line.startswith('|'):
                    candidate_field += line + '\n'

            return fields


    inputs = [
        "1 1", "1 2", "1 3",
        "2 1", "2 2", "2 3",
        "3 1", "3 2", "3 3"
    ]


    def iterate_cells(initial: str) -> str:
        index: int = -1
        for i in range(len(inputs)):
            if initial == inputs[i]:
                index = i
                break

        if index == -1:
            return ''

        full_input: str = ''
        for i in range(index, index + 9):
            full_input += inputs[i % len(inputs)] + '\n'

        return full_input


    class TicTacToeTest(StageTest):
        def generate(self) -> List[TestCase]:
            tests: List[TestCase] = []

            i: int = 0
            for input in inputs:
                full_move_input = iterate_cells(input)

                str_nums = input.split()
                x = int(str_nums[0])
                y = int(str_nums[1])

                if i % 2 == 1:
                    full_move_input = f'4 {i}\n' + full_move_input

                full_game_input = ''
                for _ in range(9):
                    full_game_input += full_move_input

                if i % 4 == 0:
                    initial = "start user easy\n"
                elif i % 4 == 1:
                    initial = "start easy user\n"
                elif i % 4 == 2:
                    initial = "start user medium\n"
                else:
                    initial = "start medium user\n"

                full_game_input = initial + full_game_input + "exit"

                tests += [TestCase(stdin=full_game_input)]

                i += 1

            tests += [
                TestCase(stdin="start easy easy\nexit"),
                TestCase(stdin="start medium medium\nexit"),
                TestCase(stdin="start medium easy\nexit"),
                TestCase(stdin="start easy medium\nexit"),
                TestCase(stdin=
                         "start user user\n" +
                         "1 1\n" +
                         "2 2\n" +
                         "1 2\n" +
                         "2 1\n" +
                         "1 3\n" +
                         "exit"),
            ]

            return tests

        def check(self, reply: str, attach: str) -> CheckResult:

            fields = TicTacToeField.parse_all(reply)

            if len(fields) == 0:
                return CheckResult.wrong(
                    "No fields found"
                )

            for i in range(1, len(fields)):
                curr: TicTacToeField = fields[i - 1]
                next: TicTacToeField = fields[i]

                stayed = curr.equal_to(next)
                improved = curr.has_next_as(next)

                if not (stayed or improved):
                    return CheckResult.wrong(
                        "For two fields following each " +
                        "other one is not a continuation " +
                        "of the other (they differ more than in two places)."
                    )

            return CheckResult.correct()


    if __name__ == '__main__':
        TicTacToeTest('tictactoe.tictactoe').run_tests()
  learner_created: false
- name: tictactoe/tictactoe.py
  visible: true
  text: |
    import random


    def coord_to_index(x_coord, y_coord):
        return 3 - y_coord, x_coord - 1


    class TicTacToe:
        def __init__(self):
            self.board = [[' ' for row in range(3)] for col in range(3)]
            self.display_board()

        def display_board(self):
            print(9 * '-',
                  f'| {self.board[0][0]} {self.board[0][1]} {self.board[0][2]} |',
                  f'| {self.board[1][0]} {self.board[1][1]} {self.board[1][2]} |',
                  f'| {self.board[2][0]} {self.board[2][1]} {self.board[2][2]} |',
                  9 * '-', sep='\n')

        def check_game_status(self):
            if self.board[0][0] == self.board[1][1] == self.board[2][2] or \
                    self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':
                return f'{self.board[1][1]} wins'
            for index in range(3):
                if self.board[0][index] == self.board[1][index] == self.board[2][index] != ' ':
                    return f'{self.board[0][index]} wins'
                if self.board[index][0] == self.board[index][1] == self.board[index][2] != ' ':
                    return f'{self.board[index][0]} wins!'
            if not any(' ' in row for row in self.board):
                return 'Draw!'

        def user_move(self):
            while True:
                try:
                    x, y = map(int, input("Enter the Coordinates: ").split())
                    x, y = coord_to_index(x, y)
                    if not self.board[x][y].isspace():
                        print("This cell is occupied! Choose another one!")
                    else:
                        return x, y
                except ValueError:
                    print(" You should enter numbers!")
                except IndexError:
                    print("Coordinates should be from 1 to 3!")

        def ai_move(self):
            print('Making move level "easy"')
            x, y = coord_to_index(random.randint(1, 3), random.randint(1, 3))
            while not self.board[x][y].isspace():
                x, y = coord_to_index(random.randint(1, 3), random.randint(1, 3))
            return x, y

        def player_move(self, x, y, play):
            self.board[x][y] = play
            self.display_board()

        def play(self):
            while any(' ' in row for row in self.board):
                params = input("Input command: ").split()
                if len(params) <= 2:
                    if len(params) == 1 and params[0] == "exit":
                        exit()
                    else:
                        print("Bad parameters!")
                elif len(params) == 3:
                    player1, player2 = params[1:]
                    if player1 == "easy":
                        self.player_move(*self.ai_move(), "X")
                    elif player1 == player2 == "user":
                        self.player_move(*self.user_move(), "O")
                    elif player2 == "easy":
                        self.player_move(*self.ai_move(), "O")
                    if self.check_game_status():
                        print(self.check_game_status())


    TicTacToe().play()
  learner_created: true
feedback_link: https://hyperskill.org/projects/82/stages/455/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/82/stages/455/implement">JetBrains
    Academy</a>
  time: Tue, 06 Oct 2020 20:40:52 UTC
record: 4
